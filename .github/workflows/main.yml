name: inspect_point_ai_dataintegration
on:
  push:
    branches:
      - main

jobs:
  docker_cicd:
    runs-on: ubuntu-latest
    permissions:
      id-token: write   
      contents: read  
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHubActionsSession

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, Tag, and Push Docker Image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building Docker image..."
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          echo "Pushing Docker image to Amazon ECR..."
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Deploy Lambda Function with Retries
        env:
          FUNCTION_NAME: inspect_point_ai_dataintegration
          IMAGE_URI: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}:${{ github.sha }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
        run: |
          set -e
          echo "Retrieving AWS Account ID..."
          ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
          echo "AWS Account ID: $ACCOUNT_ID"

          function retry {
            local retries=5
            local delay=5
            local attempt=1
            while [ $attempt -le $retries ]; do
              if "$@"; then
                return 0
              fi
              echo "Attempt $attempt failed. Retrying in $delay seconds..."
              sleep $delay
              attempt=$(( attempt + 1 ))
              delay=$(( delay * 2 ))
            done
            echo "Command failed after $retries attempts."
            return 1
          }

          echo "Checking if Lambda function exists..."
          if aws lambda get-function --function-name $FUNCTION_NAME > /dev/null 2>&1; then
            echo "Function exists. Updating..."
            retry aws lambda update-function-code \
              --function-name $FUNCTION_NAME \
              --image-uri $IMAGE_URI
          else
            echo "Function does not exist. Creating..."
            retry aws lambda create-function \
              --function-name $FUNCTION_NAME \
              --role $AWS_ROLE_ARN \
              --package-type Image \
              --code '{"ImageUri":"'"$IMAGE_URI"'"}' \
              --timeout 900 \
              --memory-size 1024 \
              --region $AWS_REGION
          fi

      - name: Add S3 Trigger with Safe Check
        env:
          FUNCTION_NAME: inspect_point_ai_dataintegration
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          S3_EVENT_SUFFIX: .pdf
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          set -e
          ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)

          function retry {
            local retries=5
            local delay=5
            local attempt=1
            while [ $attempt -le $retries ]; do
              if "$@"; then
                return 0
              fi
              echo "Attempt $attempt failed. Retrying in $delay seconds..."
              sleep $delay
              attempt=$(( attempt + 1 ))
              delay=$(( delay * 2 ))
            done
            echo "Command failed after $retries attempts."
            return 1
          }

          echo "Granting S3 permission to invoke the Lambda function..."
          aws lambda add-permission \
            --function-name $FUNCTION_NAME \
            --statement-id s3-trigger \
            --action lambda:InvokeFunction \
            --principal s3.amazonaws.com \
            --source-arn arn:aws:s3:::$S3_BUCKET_NAME \
            --source-account $ACCOUNT_ID > /dev/null 2>&1 || echo "Permission already exists."

          echo "Checking existing S3 trigger configuration..."
          EXISTING_CONFIG=$(aws s3api get-bucket-notification-configuration --bucket $S3_BUCKET_NAME)
          if echo "$EXISTING_CONFIG" | grep -q "$FUNCTION_NAME"; then
            echo "S3 trigger already exists. Skipping trigger creation."
          else
            echo "Adding S3 trigger for bucket: $S3_BUCKET_NAME and suffix: $S3_EVENT_SUFFIX..."
            retry aws s3api put-bucket-notification-configuration \
              --bucket $S3_BUCKET_NAME \
              --notification-configuration '{
                "LambdaFunctionConfigurations": [
                  {
                    "LambdaFunctionArn": "arn:aws:lambda:'"$AWS_REGION"':'"$ACCOUNT_ID"':function:'"$FUNCTION_NAME"'",
                    "Events": ["s3:ObjectCreated:Put"],
                    "Filter": {
                      "Key": {
                        "FilterRules": [
                          {"Name": "suffix", "Value": ".pdf"}
                        ]
                      }
                    }
                  }
                ]
              }'
          fi

          echo "S3 trigger setup complete."
