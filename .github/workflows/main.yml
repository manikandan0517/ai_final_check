name: inspect_point_ai_dataintegration

on:
  push:
    branches:
      - main

jobs:
  check_changes:
    runs-on: ubuntu-latest
    outputs:
      lambda_changed: ${{ steps.set_outputs.outputs.lambda_changed }}
      ec2_changed: ${{ steps.set_outputs.outputs.ec2_changed }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Fetch full git history
        run: git fetch --unshallow

      - name: Check for changes
        id: set_outputs
        run: |
          echo "Checking for changed files..."
          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          echo "Changed files:"
          echo "$CHANGED_FILES"

          LAMBDA_CHANGED=$(echo "$CHANGED_FILES" | grep "^ai-data-integration-lambda/" || true)
          EC2_CHANGED=$(echo "$CHANGED_FILES" | grep "^ai-data-integration/" || true)

          echo "LAMBDA_CHANGED files: $LAMBDA_CHANGED"
          echo "EC2_CHANGED files: $EC2_CHANGED"

          echo "lambda_changed=${LAMBDA_CHANGED:+true}" >> $GITHUB_OUTPUT
          echo "ec2_changed=${EC2_CHANGED:+true}" >> $GITHUB_OUTPUT

  deploy_lambda:
    needs: check_changes
    if: needs.check_changes.outputs.lambda_changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHubActionsSession

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Delete Existing ECR Images
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
        run: |
          echo "Deleting existing ECR images..."
          IMAGE_IDS=$(aws ecr list-images --repository-name $REPOSITORY --query 'imageIds[*]' --output json)
          if [ "$IMAGE_IDS" != "[]" ]; then
            aws ecr batch-delete-image --repository-name $REPOSITORY --image-ids "$IMAGE_IDS"
            echo "Existing images deleted."
          else
            echo "No images found to delete."
          fi

      - name: Build, Tag, and Push Docker Image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f ./ai-data-integration-lambda/Dockerfile -t $REGISTRY/$REPOSITORY:$IMAGE_TAG ./ai-data-integration-lambda
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Deploy Lambda Function
        env:
          FUNCTION_NAME: inspectpoint-ai-data-integration-lambda
          IMAGE_URI: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}:${{ github.sha }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)

          echo "Checking if Lambda function exists..."
          if aws lambda get-function --function-name $FUNCTION_NAME; then
            aws lambda update-function-code --function-name $FUNCTION_NAME --image-uri $IMAGE_URI
            echo "Lambda function updated."
          else
            aws lambda create-function \
              --function-name $FUNCTION_NAME \
              --role $AWS_ROLE_ARN \
              --package-type Image \
              --code ImageUri=$IMAGE_URI \
              --timeout 900 \
              --memory-size 1024 \
              --region $AWS_REGION
            echo "Lambda function created."
          fi
  deploy_ec2:
    needs: check_changes
    if: needs.check_changes.outputs.ec2_changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up SSH key
        run: |
          echo "🔑 Setting up SSH key..."
          printf '%s\n' "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: Pull Code to EC2 and Restart Gunicorn (With Logs)
        run: |
          EC2_USER=ubuntu
          EC2_IP=${{ secrets.EC2_INSTANCE_IP }}

          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_IP << 'EOF'
            echo "🔄 Checking for existing code..."
            if [ ! -d /home/ubuntu/ai-data-integration ]; then
              echo "🚀 Cloning repository..."
              git clone git@github.com:manikandan0517/ip_feature.git /home/ubuntu/ai-data-integration
            else
              echo "✅ Repository already exists."
              cd /home/ubuntu/ai-data-integration || exit 1
              
              if [ ! -d ".git" ]; then
                echo "❌ Invalid git repository detected. Re-cloning the repository..."
                rm -rf /home/ubuntu/ai-data-integration
                git clone git@github.com:manikandan0517/ip_feature.git /home/ubuntu/ai-data-integration || { echo "❌ Git clone failed"; exit 1; }
              else
                echo "📥 Pulling latest changes from GitHub..."
                git reset --hard origin/main  # Resets local changes
                git pull origin main || { echo "❌ Git pull failed"; exit 1; }
              fi
            fi
            echo "🐍 Checking/Creating virtual environment..."
            if [ ! -d "venv" ]; then
              python3 -m venv venv || { echo "❌ Failed to create virtual environment"; exit 1; }
            fi

            echo "🐍 Activating virtual environment..."
            source venv/bin/activate || { echo "❌ Virtual environment activation failed"; exit 1; }

            echo "📦 Installing dependencies..."
            pip install -r requirements.txt || { echo "❌ Dependency installation failed"; exit 1; }

            echo "🔁 Restarting Gunicorn service..."
            sudo systemctl restart gunicorn || { echo "❌ Failed to restart Gunicorn"; exit 1; }

            echo "✅ Deployment completed successfully."
          EOF

      - name: Check EC2 Deployment Status (With Logs)
        run: |
          EC2_USER=ubuntu
          EC2_IP=${{ secrets.EC2_INSTANCE_IP }}

          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_IP << 'EOF'
            echo "🔍 Checking Gunicorn service status..."
            sudo systemctl status gunicorn --no-pager || { echo "❌ Gunicorn service is not running properly"; exit 1; }

            echo "📋 Checking recent Gunicorn logs..."
            sudo journalctl -u gunicorn --since "10 minutes ago" || echo "⚠️ No recent logs found."
          EOF
